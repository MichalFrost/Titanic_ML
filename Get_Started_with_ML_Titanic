{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "72972e94",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-09-16T10:41:21.222233Z",
     "iopub.status.busy": "2024-09-16T10:41:21.221180Z",
     "iopub.status.idle": "2024-09-16T10:41:21.638230Z",
     "shell.execute_reply": "2024-09-16T10:41:21.636776Z"
    },
    "papermill": {
     "duration": 0.426873,
     "end_time": "2024-09-16T10:41:21.641597",
     "exception": false,
     "start_time": "2024-09-16T10:41:21.214724",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/titanic/train.csv\n",
      "/kaggle/input/titanic/test.csv\n",
      "/kaggle/input/titanic/gender_submission.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c9d1e6f4",
   "metadata": {
    "papermill": {
     "duration": 0.003722,
     "end_time": "2024-09-16T10:41:21.649491",
     "exception": false,
     "start_time": "2024-09-16T10:41:21.645769",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 1. Load all necessary data, libraries and files that you will need to next steps"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "80487940",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-16T10:41:21.659156Z",
     "iopub.status.busy": "2024-09-16T10:41:21.658572Z",
     "iopub.status.idle": "2024-09-16T10:41:21.707483Z",
     "shell.execute_reply": "2024-09-16T10:41:21.706369Z"
    },
    "papermill": {
     "duration": 0.057098,
     "end_time": "2024-09-16T10:41:21.710334",
     "exception": false,
     "start_time": "2024-09-16T10:41:21.653236",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  \\\n",
       "0            1         0       3   \n",
       "1            2         1       1   \n",
       "2            3         1       3   \n",
       "3            4         1       1   \n",
       "4            5         0       3   \n",
       "\n",
       "                                                Name     Sex   Age  SibSp  \\\n",
       "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
       "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "4                           Allen, Mr. William Henry    male  35.0      0   \n",
       "\n",
       "   Parch            Ticket     Fare Cabin Embarked  \n",
       "0      0         A/5 21171   7.2500   NaN        S  \n",
       "1      0          PC 17599  71.2833   C85        C  \n",
       "2      0  STON/O2. 3101282   7.9250   NaN        S  \n",
       "3      0            113803  53.1000  C123        S  \n",
       "4      0            373450   8.0500   NaN        S  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data = pd.read_csv(\"/kaggle/input/titanic/train.csv\")\n",
    "train_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "a7a189d6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-16T10:41:21.720735Z",
     "iopub.status.busy": "2024-09-16T10:41:21.720302Z",
     "iopub.status.idle": "2024-09-16T10:41:21.742565Z",
     "shell.execute_reply": "2024-09-16T10:41:21.741359Z"
    },
    "papermill": {
     "duration": 0.030299,
     "end_time": "2024-09-16T10:41:21.745013",
     "exception": false,
     "start_time": "2024-09-16T10:41:21.714714",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>892</td>\n",
       "      <td>3</td>\n",
       "      <td>Kelly, Mr. James</td>\n",
       "      <td>male</td>\n",
       "      <td>34.5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>330911</td>\n",
       "      <td>7.8292</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>893</td>\n",
       "      <td>3</td>\n",
       "      <td>Wilkes, Mrs. James (Ellen Needs)</td>\n",
       "      <td>female</td>\n",
       "      <td>47.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>363272</td>\n",
       "      <td>7.0000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>894</td>\n",
       "      <td>2</td>\n",
       "      <td>Myles, Mr. Thomas Francis</td>\n",
       "      <td>male</td>\n",
       "      <td>62.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>240276</td>\n",
       "      <td>9.6875</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>895</td>\n",
       "      <td>3</td>\n",
       "      <td>Wirz, Mr. Albert</td>\n",
       "      <td>male</td>\n",
       "      <td>27.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>315154</td>\n",
       "      <td>8.6625</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>896</td>\n",
       "      <td>3</td>\n",
       "      <td>Hirvonen, Mrs. Alexander (Helga E Lindqvist)</td>\n",
       "      <td>female</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3101298</td>\n",
       "      <td>12.2875</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Pclass                                          Name     Sex  \\\n",
       "0          892       3                              Kelly, Mr. James    male   \n",
       "1          893       3              Wilkes, Mrs. James (Ellen Needs)  female   \n",
       "2          894       2                     Myles, Mr. Thomas Francis    male   \n",
       "3          895       3                              Wirz, Mr. Albert    male   \n",
       "4          896       3  Hirvonen, Mrs. Alexander (Helga E Lindqvist)  female   \n",
       "\n",
       "    Age  SibSp  Parch   Ticket     Fare Cabin Embarked  \n",
       "0  34.5      0      0   330911   7.8292   NaN        Q  \n",
       "1  47.0      1      0   363272   7.0000   NaN        S  \n",
       "2  62.0      0      0   240276   9.6875   NaN        Q  \n",
       "3  27.0      0      0   315154   8.6625   NaN        S  \n",
       "4  22.0      1      1  3101298  12.2875   NaN        S  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_data = pd.read_csv(\"/kaggle/input/titanic/test.csv\")\n",
    "test_data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "53229983",
   "metadata": {
    "papermill": {
     "duration": 0.004051,
     "end_time": "2024-09-16T10:41:21.753762",
     "exception": false,
     "start_time": "2024-09-16T10:41:21.749711",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 2. Conduct EDA - Exploratory Data Analysis\n",
    "\n",
    "#### =ENG=\n",
    "\n",
    "EDA is the process of initially analyzing data to understand its structure, patterns, and relationships through visualization and descriptive statistics. EDA helps uncover hidden insights, identify anomalies, and formulate hypotheses that can lead to more advanced analyses.\n",
    "\n",
    "#### =PL=\n",
    "\n",
    "EDA to proces wstępnej analizy danych, który ma na celu zrozumienie ich struktury, wzorców i relacji poprzez wizualizację i statystykę opisową. EDA pomaga odkrywać ukryte informacje, identyfikować anomalie oraz formułować hipotezy, które mogą prowadzić do dalszych, bardziej zaawansowanych analiz.\n",
    "\n",
    "#### =DE=\n",
    "\n",
    "EDA ist der Prozess der anfänglichen Analyse von Daten, um deren Struktur, Muster und Beziehungen durch Visualisierung und deskriptive Statistik zu verstehen. EDA hilft, versteckte Erkenntnisse zu entdecken, Anomalien zu identifizieren und Hypothesen zu formulieren, die zu weiterführenden, detaillierteren Analysen führen können\n",
    "\n",
    "#### =ES=\n",
    "\n",
    "EDA es el proceso de análisis inicial de datos para entender su estructura, patrones y relaciones a través de la visualización y estadísticas descriptivas. El EDA ayuda a descubrir información oculta, identificar anomalías y formular hipótesis que pueden conducir a análisis más avanzados"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "675d51f5",
   "metadata": {
    "papermill": {
     "duration": 0.003962,
     "end_time": "2024-09-16T10:41:21.762037",
     "exception": false,
     "start_time": "2024-09-16T10:41:21.758075",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "f480f09e",
   "metadata": {
    "papermill": {
     "duration": 0.004086,
     "end_time": "2024-09-16T10:41:21.770467",
     "exception": false,
     "start_time": "2024-09-16T10:41:21.766381",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 3. You can make some statistics, findings\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "84fe44ef",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-16T10:41:21.781475Z",
     "iopub.status.busy": "2024-09-16T10:41:21.780441Z",
     "iopub.status.idle": "2024-09-16T10:41:21.792384Z",
     "shell.execute_reply": "2024-09-16T10:41:21.791216Z"
    },
    "papermill": {
     "duration": 0.020038,
     "end_time": "2024-09-16T10:41:21.794880",
     "exception": false,
     "start_time": "2024-09-16T10:41:21.774842",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "% of women who survived: 0.7420382165605095\n"
     ]
    }
   ],
   "source": [
    "women = train_data.loc[train_data.Sex == 'female'][\"Survived\"]\n",
    "rate_women = sum(women)/len(women)\n",
    "\n",
    "print(\"% of women who survived:\", rate_women)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "eed6756b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-16T10:41:21.805493Z",
     "iopub.status.busy": "2024-09-16T10:41:21.805091Z",
     "iopub.status.idle": "2024-09-16T10:41:21.812985Z",
     "shell.execute_reply": "2024-09-16T10:41:21.811632Z"
    },
    "papermill": {
     "duration": 0.016528,
     "end_time": "2024-09-16T10:41:21.815938",
     "exception": false,
     "start_time": "2024-09-16T10:41:21.799410",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "% of men who survived: 0.18890814558058924\n"
     ]
    }
   ],
   "source": [
    "men = train_data.loc[train_data.Sex == 'male'][\"Survived\"]\n",
    "rate_men = sum(men)/len(men)\n",
    "\n",
    "print(\"% of men who survived:\", rate_men)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "21ca3c4b",
   "metadata": {
    "papermill": {
     "duration": 0.00457,
     "end_time": "2024-09-16T10:41:21.826322",
     "exception": false,
     "start_time": "2024-09-16T10:41:21.821752",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 4. Machine Learning Model\n",
    "\n",
    "Prepare a model that you will use to predict the results. Feed the model with training data, proceed the learning and at the end make some predictions with your test data. It's good to see the result accuracy."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "802384ee",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-16T10:41:21.837416Z",
     "iopub.status.busy": "2024-09-16T10:41:21.836954Z",
     "iopub.status.idle": "2024-09-16T10:41:23.778027Z",
     "shell.execute_reply": "2024-09-16T10:41:23.776520Z"
    },
    "papermill": {
     "duration": 1.949702,
     "end_time": "2024-09-16T10:41:23.780768",
     "exception": false,
     "start_time": "2024-09-16T10:41:21.831066",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "\n",
    "y = train_data[\"Survived\"]\n",
    "\n",
    "features = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\"]\n",
    "X = pd.get_dummies(train_data[features])\n",
    "X_test = pd.get_dummies(test_data[features])\n",
    "\n",
    "model = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=1)\n",
    "model.fit(X, y)\n",
    "predictions = model.predict(X_test)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "2f15263d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-16T10:41:23.792425Z",
     "iopub.status.busy": "2024-09-16T10:41:23.791877Z",
     "iopub.status.idle": "2024-09-16T10:41:23.804337Z",
     "shell.execute_reply": "2024-09-16T10:41:23.803208Z"
    },
    "papermill": {
     "duration": 0.021399,
     "end_time": "2024-09-16T10:41:23.806940",
     "exception": false,
     "start_time": "2024-09-16T10:41:23.785541",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>892</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>893</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>894</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>895</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>896</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>413</th>\n",
       "      <td>1305</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>414</th>\n",
       "      <td>1306</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>415</th>\n",
       "      <td>1307</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>416</th>\n",
       "      <td>1308</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>417</th>\n",
       "      <td>1309</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>418 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     PassengerId  Survived\n",
       "0            892         0\n",
       "1            893         1\n",
       "2            894         0\n",
       "3            895         0\n",
       "4            896         1\n",
       "..           ...       ...\n",
       "413         1305         0\n",
       "414         1306         1\n",
       "415         1307         0\n",
       "416         1308         0\n",
       "417         1309         0\n",
       "\n",
       "[418 rows x 2 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "output = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\n",
    "output"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bc4ef9cc",
   "metadata": {
    "papermill": {
     "duration": 0.004632,
     "end_time": "2024-09-16T10:41:23.817031",
     "exception": false,
     "start_time": "2024-09-16T10:41:23.812399",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 5. Save your results and sumbit them on competition site!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "341dafc0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-16T10:41:23.829089Z",
     "iopub.status.busy": "2024-09-16T10:41:23.827970Z",
     "iopub.status.idle": "2024-09-16T10:41:23.838713Z",
     "shell.execute_reply": "2024-09-16T10:41:23.837369Z"
    },
    "papermill": {
     "duration": 0.019385,
     "end_time": "2024-09-16T10:41:23.841181",
     "exception": false,
     "start_time": "2024-09-16T10:41:23.821796",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Your submission was successfully saved!\n"
     ]
    }
   ],
   "source": [
    "output.to_csv('submission.csv', index=False)\n",
    "print(\"Your submission was successfully saved!\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 26502,
     "sourceId": 3136,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 30761,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 5.975341,
   "end_time": "2024-09-16T10:41:24.471605",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-09-16T10:41:18.496264",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
